# These jobs are triggered automatically and they test code, examples, and wheels.
# Additional checks can be manually triggered
variables:
  nightlyRelease: $[and(eq(variables['nightly_check'], true), eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))]

trigger:
- master

pr:
- master

jobs:


- job: 'macOS1014'
  pool:
    vmImage: 'macOS-10.14'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python38:
        python.version: '3.8'
  variables:
    CCACHE_DIR: $(Pipeline.Workspace)/ccache

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - bash: |
      set -e
      sed -i.bak "s/'giotto-tda'/'giotto-tda-nightly'/1" setup.py
      sed -i.bak 's/"giotto-tda"/"giotto-tda-nightly"/1' setup.py
      rm setup.py.bak
      sed -i.bak "s/__version__.*/__version__ = '$(Build.BuildNumber)'/1" gtda/_version.py
      rm gtda/_version.py.bak
    condition: eq(variables.nightlyRelease, true)
    displayName: 'Change name to giotto-tda-nightly'

  - task: Cache@2
    inputs:
      key: '"ccache-wheels-v2020.10.05" | $(Agent.OS) | "$(python.version)"'
      path: $(CCACHE_DIR)
    displayName: ccache

  - script: |
      set -e
      brew update
      brew install boost ccache
    displayName: 'Install system dependencies'

  - script: |
      set -e
      python -m pip install --upgrade pip setuptools
      python -m pip install wheel
      source .azure-ci/setup_ccache.sh
      python -m pip install -e ".[dev]"
      ccache -s
    displayName: 'Install dependencies and dev environment'

  - script: |
      set -e
      pytest gtda --cov --cov-report xml
    displayName: 'Test dev install with pytest, upload coverage report'

  - script: |
      set -e
      flake8
    displayName: 'Test dev install with flake8'

  - script: |
      set -e
      pip uninstall -y giotto-tda
      pip uninstall -y giotto-tda-nightly
    displayName: 'Uninstall giotto-tda/giotto-tda-nightly'

  - script: |
      set -e
      python setup.py bdist_wheel
    displayName: 'Build the wheels'

  - script: python -m pip install dist/*.whl
    displayName: 'Install the wheels'

  - script: |
      set -e
      mkdir tmp_test_cov
      cd tmp_test_cov
      pytest --pyargs gtda --ignore-glob='*externals*' --no-cov --no-coverage-upload
    displayName: 'Test the wheels with pytest'

  - script: |
      set -e
      python -m pip install -e ".[examples]"
      python -m pip install papermill
      cd examples
      for n in *.ipynb
      do
        papermill --start_timeout 2000 $n -
      done
    displayName: 'Test jupyter notebooks with papermill'

  - task: CopyFiles@2
    displayName: 'Copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - script: |
      set -e
      python -m pip install twine
      twine check dist/*
    displayName: 'Check distribution with twine'

  - task: PublishBuildArtifacts@1
    displayName: 'Create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel'

  - bash: |
      set -e
      twine upload -u giotto-learn -p $(pypi_psw) --skip-existing dist/*
    condition: eq(variables.nightlyRelease, true)
    displayName: 'Upload nightly wheels to PyPI'
