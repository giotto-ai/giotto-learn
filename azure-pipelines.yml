# These jobs are triggered automatically and they test code, examples, and wheels.
# Additional checks can be manually triggered
jobs:

- job: 'manylinux2010'
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '36'
        python.version: '3.6'
      Python37:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '37'
        python.version: '3.7'
      Python38:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '38'
        python.version: '3.8'
  variables:
    CCACHE_DIR: $(Pipeline.Workspace)/ccache

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - task: Cache@2
    inputs:
      key: '"ccache-wheels-v2020.02.17" | $(Agent.OS) | "$(python.version)"'
      path: $(CCACHE_DIR)
    displayName: ccache

  - bash: |
      sed -i "s/'giotto-tda'/'giotto-tda-nightly'/1" setup.py
      sed -i "s/__version__.*/__version__ = '$(Build.BuildNumber)'/1" gtda/_version.py
    failOnStderr: true
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Change name to giotto-tda-nightly'

  - task: Bash@3
    inputs:
      filePath: .azure-ci/build_manylinux2010.sh
      failOnStderr: false
    env:
      python_ver: $(python_ver)
      CCACHE_DIR: $(CCACHE_DIR)
    displayName: 'Run the docker, install and uninstall dev environment, test with pytest and flake8, build the wheels'

  - script: |
      python -m pip install --upgrade pip
      pip install dist/*.whl
    failOnStderr: true
    displayName: 'Install the wheels'

  - script: |
      pip install pytest pytest-cov pytest-azurepipelines pytest-benchmark flake8 hypothesis
      mkdir tmp_test_cov
      cd tmp_test_cov
      pytest --pyargs gtda --ignore-glob='*externals*' --no-cov --no-coverage-upload
    failOnStderr: true
    displayName: 'Test the wheels with pytest'

  - script: |
      pip install openml pandas
      pip install "papermill==1.2.1"
      cd examples
      for n in *.ipynb
      do
        papermill --start_timeout 2000 $n -
      done
    failOnStderr: true
    condition: eq(variables['notebooks_check'], 'true')
    displayName: 'Test the wheels on jupyter notebooks with papermill'

  - task: CopyFiles@2
    displayName: 'Copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'

  - bash: |
      pip install twine
      for f in dist/*linux* ; do sudo mv "$f" "${f/linux/manylinux2010}"; done
      twine upload -u giotto-learn -p $(pypi_psw) --skip-existing dist/*
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Upload nightly wheels to PyPI'


- job: 'macOS1014'
  pool:
    vmImage: 'macOS-10.14'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
  variables:
    CCACHE_DIR: $(Pipeline.Workspace)/ccache

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - bash: |
      sed -i.bak "s/'giotto-tda'/'giotto-tda-nightly'/1" setup.py
      rm setup.py.bak
      sed -i.bak "s/__version__.*/__version__ = '$(Build.BuildNumber)'/1" gtda/_version.py
      rm gtda/_version.py.bak
    failOnStderr: true
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Change name to giotto-tda-nightly'

  - task: Cache@2
    inputs:
      key: '"ccache-v2020.02.17" | $(Agent.OS) | "$(python.version)"'
      path: $(CCACHE_DIR)
    displayName: ccache

  - script: |
      brew update
      brew install boost ccache
    failOnStderr: true
    displayName: 'Install system dependencies'

  - script: |
      python -m pip install --upgrade pip setuptools
      source .azure-ci/setup_ccache.sh
      pip install -e ".[tests, doc]"
      ccache -s
    failOnStderr: true
    displayName: 'Install dependencies and dev environement'

  - script: |
      pytest gtda --cov --cov-report xml
      flake8
    failOnStderr: true
    displayName: 'Test dev install with pytest and flake8'

  - script: |
      set -e
      pip uninstall -y giotto-tda
      pip uninstall -y giotto-tda-nightly
    displayName: 'Uninstall giotto-tda/giotto-tda-nightly'

  - script: |
      pip install wheel
      python setup.py sdist bdist_wheel
    failOnStderr: false
    displayName: 'Build the wheels'

  - script: pip install dist/*.whl
    failOnStderr: true
    displayName: 'Install the wheels'

  - script: |
      mkdir tmp_test_cov
      cd tmp_test_cov
      pytest --pyargs gtda --ignore-glob='*externals*' --no-cov --no-coverage-upload
    failOnStderr: true
    displayName: 'Test the wheels with pytest'

  - script: |
      pip install openml pandas
      pip install "papermill==1.2.1"
      cd examples
      for n in *.ipynb
      do
        papermill --start_timeout 2000 $n -
      done
    failOnStderr: true
    displayName: 'Test the wheels on jupyter notebooks with papermill'

  - script: |
      cd doc/
      make html
    failOnStderr: true
    displayName: 'Build sphinx doc'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: doc/build
      includeRootFolder: true
      archiveType: 'zip'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true
    displayName: 'Archive doc'

  - task: CopyFiles@2
    displayName: 'Copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'

  - bash: |
      pip install twine
      twine upload -u giotto-learn -p $(pypi_psw) --skip-existing dist/*
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Upload nightly wheels to PyPI'


- job: 'win2016'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        python_ver: '36'
        python.version: '3.6'
      Python37:
        python_ver: '37'
        python.version: '3.7'
      Python38:
        python_ver: '38'
        python.version: '3.8'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - bash: |
      sed -i "s/'giotto-tda'/'giotto-tda-nightly'/1" setup.py
      sed -i "s/__version__.*/__version__ = '$(Build.BuildNumber)'/1" gtda/_version.py
    failOnStderr: true
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Change name to giotto-tda-nightly'

  - script: |
      python -m pip install --upgrade pip setuptools
      pip install -e ".[tests, doc]"
    failOnStderr: true
    displayName: 'Install dev environment'

  - script: |
      pytest gtda --cov --cov-report xml
      flake8
    failOnStderr: true
    displayName: 'Test dev install with pytest and flake8'

  - script: |
      pip uninstall -y giotto-tda || exit /b
      pip uninstall -y giotto-tda-nightly || exit /b
    displayName: 'Uninstall giotto-tda/giotto-tda-nightly dev'

  - bash: |
      sed -i $'s/\r$//' README.rst
      pip install wheel
      python setup.py sdist bdist_wheel
    failOnStderr: false
    displayName: 'Build the wheels'

  - bash: pip install dist/*.whl
    failOnStderr: true
    displayName: 'Install the wheels'

  - bash: |
      mkdir tmp_test_cov
      cd tmp_test_cov
      pytest --pyargs gtda --ignore-glob='*externals*' --no-cov --no-coverage-upload
    failOnStderr: true
    displayName: 'Test the wheels with pytest'

  - script: |
      pip install openml pandas
      pip install "papermill==1.2.1"
      cd examples
      FOR %%n in (*.ipynb) DO (papermill --start_timeout 2000 %%n -)
    failOnStderr: true
    condition: eq(variables['notebooks_check'], 'true')
    displayName: 'Test the wheels on jupyter notebooks with papermill'

  - task: CopyFiles@2
    displayName: 'Copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'

  - bash: |
      pip install twine
      twine upload -u giotto-learn -p $(pypi_psw) --skip-existing dist/*
    failOnStderr: true
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Upload nightly wheels to PyPI'
