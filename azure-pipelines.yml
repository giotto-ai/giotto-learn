# these jobs are triggered automatically and they test the code and the examples.

jobs:
- job: 'test_ubuntu1604'
  condition: eq(variables['build_check'], 'false')
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools
      pip install wheel twine
    displayName: 'Install tools'

  - script: pip install -e ".[tests, doc]"
    displayName: 'Install dev environment'

  - script: pip install python-igraph
    displayName: 'Install python-graph'

  - script: |
      pip install plotly matplotlib openml
      jupyter nbconvert --to notebook --execute examples/*.ipynb
      pytest --cov giotto --cov-report xml
      flake8
    displayName: 'Test with pytest, nbconvert and flake8'


- job: 'test_macOS1014'
  condition: eq(variables['build_check'], 'false')
  pool:
    vmImage: 'macOS-10.14'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      brew update
      brew install boost
      brew install gcc
    displayName: 'Install boost and gcc'

  - script: |
      python -m pip install --upgrade pip setuptools
      pip install wheel twine
    displayName: 'Install tools'

  - script: pip install -e ".[tests, doc]"
    displayName: 'Install dev environment'

  - script: pip install python-igraph
    displayName: 'Install python-graph'

  - script: |
      pip install plotly matplotlib openml
      jupyter nbconvert --to notebook --execute examples/*.ipynb
      pytest --cov giotto --cov-report xml
      flake8
    displayName: 'Test with pytest, nbconvert and flake8'


- job: 'test_win2016'
  condition: eq(variables['build_check'], 'false')
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python35:
        python_ver: '35'
        python.version: '3.5'
      Python36:
        python_ver: '36'
        python.version: '3.6'
      Python37:
        python_ver: '37'
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      python -m pip install --upgrade pip setuptools
      pip install wheel twine
    displayName: 'Install tools'

  - script: |
      Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      choco install -y wget
      wget https://storage.googleapis.com/l2f-open-models/giotto-learn/windows-binaries/pycairo/pycairo-1.18.2-cp$(python_ver)-cp$(python_ver)-win_amd64.whl -O pycairo-1.18.2-cp$(python_ver)-cp$(python_ver)-win_amd64.whl
      pip install pycairo-1.18.2-cp$(python_ver)-cp$(python_ver)m-win_amd64.whl
      wget https://storage.googleapis.com/l2f-open-models/giotto-learn/windows-binaries/python-igraph/python_igraph-0.7.1.post6-cp$(python_ver)-cp$(python_ver)m-win_amd64.whl -O python_igraph-0.7.1.post6-cp$(python_ver)-cp$(python_ver)m-win_amd64.whl
      pip install python_igraph-0.7.1.post6-cp$(python_ver)-cp$(python_ver)m-win_amd64.whl
    displayName: 'Install pycairo and python-igraph'

  - script: pip install -e ".[tests, doc]"
    displayName: 'Install dev environment'

  - script: |
      pip install plotly matplotlib openml
      jupyter nbconvert --to notebook --execute examples/*.ipynb
      pytest --cov giotto --cov-report xml
      flake8
    displayName: 'Test with pytest, nbconvert and flake8'

# these jobs are triggered manually and they test the code and the examples and build the wheels and docs.

- job: 'manylinux2010'
  condition: eq(variables['build_check'], 'true')
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python35:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '35'
        python.version: '3.5'
      Python36:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '36'
        python.version: '3.6'
      Python37:
        arch: x86_64
        plat: manylinux2010_x86_64
        python_ver: '37'
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - bash: |
      sed -i "s/'giotto-learn'/'giotto-learn-nightly'/1" setup.py
      sed -i "s/__version__.*/__version__ = '$(Build.BuildNumber)'/1" giotto/_version.py
      cat giotto/_version.py
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'change name to giotto-learn-nightly'

  - task: Bash@3
    inputs:
      filePath: azure-ci/build_manylinux2010.sh
      failOnStderr: false
    env:
      python_ver: $(python_ver)
    displayName: 'Run the docker and open bash'

  - script: |
      python -m pip install --upgrade pip
      pip install pytest pytest-cov pytest-azurepipelines pytest-benchmark flake8 hypothesis python-igraph
    displayName: 'Install pytest suite'

  - script: |
      pip install dist/*.whl
      cd /tmp/
      pytest --cov --pyargs giotto --cov-report xml --ignore-glob='*externals*'
    displayName: 'Install and test the wheels'

  - task: CopyFiles@2
    displayName: 'copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'

  - bash: |
      pip install twine
      for f in dist/*linux* ; do sudo mv "$f" "${f/linux/manylinux2010}"; done
      twine upload -u giotto-learn -p $(pypi_psw) --skip-existing dist/*
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Upload wheels to PyPI'


- job: 'macOS1014'
  condition: eq(variables['build_check'], 'true')
  pool:
    vmImage: 'macOS-10.14'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - bash: |
      sed -i.bak "s/'giotto-learn'/'giotto-learn-nightly'/1" setup.py
      rm setup.py.bak
      sed -i.bak "s/__version__.*/__version__ = '$(Build.BuildNumber)'/1" giotto/_version.py
      cat giotto/_version.py
      rm giotto/_version.py.bak
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'change name to giotto-learn-nightly'

  - script: |
      brew update
      brew install boost
      brew install gcc
    displayName: 'install boost and gcc'

  - script: python -m pip install --upgrade pip setuptools
    displayName: 'Install tools'

  - script: |
      pip install -e ".[tests, doc]"
      pip install wheel twine
    displayName: 'Install dev environment'

  - script: |
      pip install plotly matplotlib openml python-igraph
      jupyter nbconvert --to notebook --execute examples/*.ipynb
      pip uninstall -y giotto-learn
      pytest --cov giotto --cov-report xml
      flake8
    condition: eq(variables['nightly_check'], 'false')
    displayName: 'Test with pytest, nbconvert and flake8'

  - script: |
      pip install plotly matplotlib openml python-igraph
      jupyter nbconvert --to notebook --execute examples/*.ipynb
      pip uninstall -y giotto-learn-nightly
      pytest --cov giotto --cov-report xml
      flake8
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Test with pytest, nbconvert and flake8'

  - script: python setup.py sdist bdist_wheel
    displayName: 'build the wheels'

  - script: |
      pip install dist/*.whl
      cd /tmp/
      pytest --cov --pyargs giotto --cov-report xml --ignore-glob='*externals*'
    displayName: 'install and test the wheels'

  - script: |
      cd doc/
      make html
      cd ..
    displayName: 'Build sphinx doc'

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: doc/build
      includeRootFolder: true
      archiveType: 'zip'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true
    displayName: 'archive doc'

  - task: CopyFiles@2
    displayName: 'copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'

  - bash: twine upload -u giotto-learn -p $(pypi_psw) --skip-existing dist/*
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Upload wheels to PyPI'


- job: 'win2016'
  condition: eq(variables['build_check'], 'true')
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python35:
        python_ver: '35'
        python.version: '3.5'
      Python36:
        python_ver: '36'
        python.version: '3.6'
      Python37:
        python_ver: '37'
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - bash: |
      sed -i "s/'giotto-learn'/'giotto-learn-nightly'/1" setup.py
      sed -i "s/__version__.*/__version__ = '$(Build.BuildNumber)'/1" giotto/_version.py
      cat giotto/_version.py
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'change name to giotto-learn-nightly'

  - script: python -m pip install --upgrade pip setuptools
    displayName: 'Install tools'

  - script: |
      Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      choco install -y wget
      wget https://storage.googleapis.com/l2f-open-models/giotto-learn/windows-binaries/pycairo/pycairo-1.18.2-cp$(python_ver)-cp$(python_ver)-win_amd64.whl -O pycairo-1.18.2-cp$(python_ver)-cp$(python_ver)-win_amd64.whl
      pip install pycairo-1.18.2-cp$(python_ver)-cp$(python_ver)m-win_amd64.whl
      wget https://storage.googleapis.com/l2f-open-models/giotto-learn/windows-binaries/python-igraph/python_igraph-0.7.1.post6-cp$(python_ver)-cp$(python_ver)m-win_amd64.whl -O python_igraph-0.7.1.post6-cp$(python_ver)-cp$(python_ver)m-win_amd64.whl
      pip install python_igraph-0.7.1.post6-cp$(python_ver)-cp$(python_ver)m-win_amd64.whl
    displayName: 'Install pycairo and python-igraph'

  - script: |
      pip install -e ".[tests, doc]"
      pip install wheel twine
    displayName: 'Install dev environment'

  - script: |
      pip install plotly matplotlib openml
      jupyter nbconvert --to notebook --execute examples/*.ipynb
      pip uninstall -y giotto-learn
      pytest --cov giotto --cov-report xml
      flake8
    condition: eq(variables['nightly_check'], 'false')
    displayName: 'Test with pytest, nbconvert and flake8'

  - script: |
      pip install plotly matplotlib openml
      jupyter nbconvert --to notebook --execute examples/*.ipynb
      pip uninstall -y giotto-learn-nightly
      pytest --cov giotto --cov-report xml
      flake8
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Test with pytest, nbconvert and flake8'

  - bash: |
      sed -i $'s/\r$//' README.rst
      python setup.py sdist bdist_wheel
    displayName: 'build the wheels'

  - bash: |
      pip install dist/*.whl
      cd /tmp/
      pytest --cov --pyargs giotto --cov-report xml --ignore-glob='*externals*'
    displayName: 'install and test the wheels'

  - task: CopyFiles@2
    displayName: 'copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'

  - bash: twine upload -u giotto-learn -p $(pypi_psw) --skip-existing dist/*
    condition: eq(variables['nightly_check'], 'true')
    displayName: 'Upload wheels to PyPI'
