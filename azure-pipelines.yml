jobs:
- job: 'manylinux2010'
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        arch: x86_64
        plat: manylinux2010_x86_64
#        python.architecture: x64
        python.version: '3.6'
      Python37:
        arch: x86_64
        plat: manylinux2010_x86_64
#        python.architecture: x64
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      docker run -d -i -t --name manylinux10 -v `pwd`:/io quay.io/pypa/manylinux2010_x86_64 /bin/bash
      echo 'running dockers:'
      docker ps
      docker exec manylinux10 ls
      docker exec manylinux10 pwd
      docker exec manylinux10 sh -c "ls /io"
      docker exec sh -c "python --version"
      docker exec python --version
      docker exec sh -c "python3 --version"
      docker exec sh -c "/io/.ci/build_manylinux2010.sh"
    displayName: 'Run the docker and open bash'
    
  - script: python -m pip install --upgrade pip setuptools
    displayName: 'Install tools'

  - script: |
      pip install -e ".[tests,doc]"
      pip uninstall -y giotto-learn
      pip install wheel twine
    displayName: 'Install dev environment'

  - script: |
      pytest --cov giotto --cov-report xml
      flake8 --exit-zero
    displayName: 'Test with pytest and flake8'

  - script: python setup.py sdist bdist_wheel
    displayName: 'build the wheels'   
 
  - script: |
      pip install dist/*.whl
      cd /tmp/
      pytest --cov --pyargs giotto --cov-report xml --ignore-glob='*externals*'
    displayName: 'install and test the wheels'

  - script: |
      cd doc/
      make html
      cd ..
    displayName: 'Build sphinx doc'
    
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: doc/build
      includeRootFolder: true
      archiveType: 'zip'
      tarCompression: 'gz'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true
    displayName: 'archive doc'

  - task: CopyFiles@2
    displayName: 'copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'


- job: 'macOS1013'
  pool:
    vmImage: 'macOS-10.13'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      brew update
      brew install boost
      brew install gcc
    displayName: 'install boost and gcc'

  - script: python -m pip install --upgrade pip setuptools
    displayName: 'Install tools'

  - script: |
      pip install -e ".[tests,doc]"
      pip uninstall -y giotto-learn
      pip install wheel twine
    displayName: 'Install dev environment'

  - script: |
      pytest --cov giotto --cov-report xml
      flake8 --exit-zero
    displayName: 'Test with pytest and flake8'

  - script: python setup.py sdist bdist_wheel
    displayName: 'build the wheels'
    
  - script: |
      pip install dist/*.whl
      cd /tmp/
      pytest --cov --pyargs giotto --cov-report xml --ignore-glob='*externals*'
    displayName: 'install and test the wheels'

  - task: CopyFiles@2
    displayName: 'copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'


- job: 'win2016'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: python -m pip install --upgrade pip setuptools
    displayName: 'Install tools'

  - script: |
      pip install -e ".[tests,doc]"
      pip uninstall -y giotto-learn
      pip install wheel twine
    displayName: 'Install dev environment'

  - script: |
      pytest --cov giotto --cov-report xml
      flake8 --exit-zero
    displayName: 'Test with pytest and flake8'

  - script: python setup.py sdist bdist_wheel
    displayName: 'build the wheels'
    
  - bash: |
      pip install dist/*.whl
      cd /tmp/
      pytest --cov --pyargs giotto --cov-report xml --ignore-glob='*externals*'
    displayName: 'install and test the wheels'

  - task: CopyFiles@2
    displayName: 'copy files'
    inputs:
      contents: 'dist/*'
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'create download link'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'wheel_and_doc'
